// <auto-generated />
using CalCalTracker.Domain.Enums;
using CalCalTracker.Persistence.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CalCalTracker.Persistence.Core.Migrations
{
    [DbContext(typeof(CalCalTrackerContext))]
    partial class CalCalTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Calories");

                    b.Property<long?>("CreatedUserId")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsGlobal");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.DayLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CalculatedWeight");

                    b.Property<long?>("CreatedUserId")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("DayLogs");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.FoodItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BetaCarotene");

                    b.Property<double>("Calcium");

                    b.Property<double>("Calories");

                    b.Property<double>("Carbohydrates");

                    b.Property<double>("Cholesterol");

                    b.Property<double>("Chromium");

                    b.Property<double>("Cobalt");

                    b.Property<double>("Copper");

                    b.Property<long?>("CreatedUserId")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<double>("Fat");

                    b.Property<double>("Fibre");

                    b.Property<double>("FolicAcid");

                    b.Property<double>("Iodine");

                    b.Property<double>("Iron");

                    b.Property<bool>("IsGlobal");

                    b.Property<double>("Magnesium");

                    b.Property<double>("Manganese");

                    b.Property<double>("Molybdenum");

                    b.Property<double>("MonounsaturatedFat");

                    b.Property<string>("Name");

                    b.Property<double>("PantothenicAcid");

                    b.Property<double>("Phosphorus");

                    b.Property<double>("PolyunsaturatedFat");

                    b.Property<double>("Potassium");

                    b.Property<double>("Protein");

                    b.Property<double>("SaturatedFat");

                    b.Property<double>("Selenium");

                    b.Property<double>("Sodium");

                    b.Property<double>("Sugar");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<double>("VitaminA");

                    b.Property<double>("VitaminB1");

                    b.Property<double>("VitaminB12");

                    b.Property<double>("VitaminB2");

                    b.Property<double>("VitaminB3");

                    b.Property<double>("VitaminB6");

                    b.Property<double>("VitaminB7");

                    b.Property<double>("VitaminC");

                    b.Property<double>("VitaminD");

                    b.Property<double>("VitaminE");

                    b.Property<double>("VitaminK");

                    b.Property<double>("Zinc");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogActivity", b =>
                {
                    b.Property<long>("ActivityId");

                    b.Property<long>("DayLogId");

                    b.HasKey("ActivityId", "DayLogId");

                    b.HasIndex("DayLogId");

                    b.ToTable("DayLogActivity");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogFoodItem", b =>
                {
                    b.Property<long>("FoodItemId");

                    b.Property<long>("DayLogId");

                    b.HasKey("FoodItemId", "DayLogId");

                    b.HasIndex("DayLogId");

                    b.ToTable("DayLogFoodItem");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogMeal", b =>
                {
                    b.Property<long>("MealId");

                    b.Property<long>("DayLogId");

                    b.HasKey("MealId", "DayLogId");

                    b.HasIndex("DayLogId");

                    b.ToTable("DayLogMeal");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.MealFoodItem", b =>
                {
                    b.Property<long>("MealId");

                    b.Property<long>("FoodItemId");

                    b.HasKey("MealId", "FoodItemId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("MealFoodItem");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Meal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatedUserId")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsGlobal");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime>("DateOfBirthCr");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.UserGoal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AchievedDate");

                    b.Property<bool>("Active");

                    b.Property<long?>("CreatedUserId")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("GoalDate");

                    b.Property<string>("Name");

                    b.Property<double>("TargetWeight");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("UserGoals");
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Activity", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.User", "CreatedUser")
                        .WithMany("UserActivities")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.DayLog", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.User", "CreatedUser")
                        .WithMany("DayLogs")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.FoodItem", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.User", "CreatedUser")
                        .WithMany("UserFoodItems")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogActivity", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.Activity", "Activity")
                        .WithMany("ActivityDayLogs")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CalCalTracker.Domain.EFCore.DayLog", "DayLog")
                        .WithMany("DayLogActivities")
                        .HasForeignKey("DayLogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogFoodItem", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.DayLog", "DayLog")
                        .WithMany("DayLogFoodItems")
                        .HasForeignKey("DayLogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CalCalTracker.Domain.EFCore.FoodItem", "FoodItem")
                        .WithMany("FoodItemDayLogs")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.DayLogMeal", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.DayLog", "DayLog")
                        .WithMany("DayLogMeals")
                        .HasForeignKey("DayLogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CalCalTracker.Domain.EFCore.Meal", "Meal")
                        .WithMany("MealDayLogs")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Joins.MealFoodItem", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.FoodItem", "FoodItem")
                        .WithMany("FoodItemMeals")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CalCalTracker.Domain.EFCore.Meal", "Meal")
                        .WithMany("MealFoodItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.Meal", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.User", "CreatedUser")
                        .WithMany("UserMeals")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalCalTracker.Domain.EFCore.UserGoal", b =>
                {
                    b.HasOne("CalCalTracker.Domain.EFCore.User", "CreatedUser")
                        .WithMany("UserGoals")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
